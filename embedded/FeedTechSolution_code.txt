
import RPi.GPIO as GPIO
from mfrc522 import SimpleMFRC522
import sqlite3
import paho.mqtt.client as mqtt
import json
import time

# Nombre de la base de datos SQLite
db_name = 'vacas.db'

# Configuración de ThingsBoard
THINGSBOARD_HOST = 'demo.thingsboard.io'  
ACCESS_TOKEN = 'yIJfWlkEsf9AKKoWqt72'  

# Configuración de pines GPIO para LEDs RGB
LED_RED = 17
LED_GREEN = 27
LED_BLUE = 22

# Configuración de pines GPIO para el sensor de flujo
PinSensor = 2
factor_conversion = 8
parametro_volumen = 0.1 # Valor objetivo del volumen en litros
lecturas_sensor = 0

# Variables globales para el sensor de flujo
NumPulsos = 0
volumen = 0
t0 = 0
contador_activo = False
info_ternera_enviada = False

# Inicialización del lector RFID
GPIO.setmode(GPIO.BCM)
GPIO.setwarnings(False)
reader = SimpleMFRC522()

# Configuración de los pines GPIO para los LEDs RGB
GPIO.setup(LED_RED, GPIO.OUT)
GPIO.setup(LED_GREEN, GPIO.OUT)
GPIO.setup(LED_BLUE, GPIO.OUT)

# Configuración de los pines GPIO para el sensor de flujo
GPIO.setup(PinSensor, GPIO.IN)
GPIO.add_event_detect(PinSensor, GPIO.RISING, callback=lambda x: contar_pulsos())

# Inicialización del cliente MQTT
client = mqtt.Client()
client.username_pw_set(ACCESS_TOKEN)

# Función para conectar al servidor MQTT de ThingsBoard
def on_connect(client, userdata, flags, rc):
    if rc == 0:
        print("Conectado a ThingsBoard con éxito")
    else:
        print(f"Fallo en la conexión, código de resultado: {rc}")

client.on_connect = on_connect
client.connect(THINGSBOARD_HOST, 1883, 60)
client.loop_start()

# Función para contar pulsos del sensor de flujo
def contar_pulsos():
    global NumPulsos
    NumPulsos += 1

# Función para obtener la frecuencia de pulsos del sensor de flujo
def obtener_frecuencia():
    global NumPulsos
    NumPulsos = 0
    time.sleep(1)
    frecuencia = NumPulsos
    return frecuencia

# Función para leer el UID de la tarjeta RFID
def leer_tag():
    try:
        print('Acercar una tarjeta RFID...')
        uid = reader.read_id()
        print(f'Tarjeta RFID detectada. UID: {uid}')
        return str(uid)
    except KeyboardInterrupt:
        GPIO.cleanup()
        raise

# Función para crear la tabla de vacas si no existe
def crear_tabla_vacas():
    conn = sqlite3.connect(db_name)
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS vacas (
                    uid TEXT PRIMARY KEY,
                    nombre TEXT,
                    edad INTEGER,
                    peso REAL,
                    id_ternera INTEGER UNIQUE
                )''')
    conn.commit()
    conn.close()

# Función para gestionar los datos de una vaca en la base de datos
def gestionar_datos(uid):
    conn = sqlite3.connect(db_name)
    c = conn.cursor()
    try:
        c.execute("SELECT * FROM vacas WHERE uid = ?", (uid,))
        row = c.fetchone()
        if row:
            print(f"Datos de la vaca con UID {uid}:")
            print(f"Nombre: {row[1]}, Edad: {row[2]}, Peso: {row[3]}, ID Ternera: {row[4]}")
            encender_led_verde()
            return row[4], row[1], row[2], row[3]  # Devuelve ID ternera, nombre, edad y peso
        else:
            print(f'No se encontraron datos para la vaca con UID {uid}.')
            encender_led_rojo()
            return None
    except sqlite3.Error as e:
        print("Error al gestionar los datos:", e)
        return None
    finally:
        conn.close()

# Función para enviar datos de la ternera a ThingsBoard
def enviar_datos_ternera(id_ternera, nombre, edad, peso):
    data = {
        'id_ternera': id_ternera,
        'nombre': nombre,
        'edad': edad,
        'peso': peso,
    }
    client.publish('v1/devices/me/telemetry', json.dumps(data), 1)
    print(f'Datos de la ternera enviados a ThingsBoard: {data}')

# Función para enviar el volumen a ThingsBoard
def enviar_volumen(id_ternera, volumen):
    data = {
        'id_ternera': id_ternera,
        'volumen': volumen,
    }
    client.publish('v1/devices/me/telemetry', json.dumps(data), 1)
    print(f'Volumen enviado a ThingsBoard: {data}')



# Función para encender el LED verde
def encender_led_verde():
    GPIO.output(LED_GREEN, GPIO.HIGH)
    GPIO.output(LED_RED, GPIO.LOW)
    GPIO.output(LED_BLUE, GPIO.LOW)

# Función para encender el LED rojo
def encender_led_rojo():
    GPIO.output(LED_GREEN, GPIO.LOW)
    GPIO.output(LED_RED, GPIO.HIGH)
    GPIO.output(LED_BLUE, GPIO.LOW)

# Función para medir el volumen del flujo
# Variable global para contar las lecturas del sensor de flujo
lecturas_sensor = 0

# Variable global para indicar si la información de la ternera ha sido enviada
info_ternera_enviada = False

# Función para medir el volumen del flujo
def medir_volumen(id_ternera):
    global volumen, t0, contador_activo, info_ternera_enviada
    volumen = 0
    contador_activo = True
    t0 = time.time()
    info_ternera_enviada = False  # Reiniciar el indicador de información de la ternera enviada
    
    while contador_activo:
        frecuencia = obtener_frecuencia()
        caudal_L_m = frecuencia / factor_conversion
        dt = time.time() - t0
        t0 = time.time()
        volumen += (caudal_L_m / 60) * dt

        print("Volumen:", round(volumen, 3), "L")

        # Verificar si el volumen ha alcanzado o superado el parámetro
        if volumen >= parametro_volumen:
            print("Volumen objetivo alcanzado:", parametro_volumen, "L")
            contador_activo = False  # Pausar el contador

            # Enviar volumen a ThingsBoard
            enviar_datos_ternera(id_ternera, nombre, edad, peso)  # Envía la información de la ternera una vez
            enviar_volumen(id_ternera, round(volumen, 3))  # Envía el volumen alcanzado
            encender_led_verde()
            break  # Salir del bucle mientras cuando se alcanza el volumen objetivo

        


# Código principal
if __name__ == '__main__':
    crear_tabla_vacas()  # Crear la tabla 'vacas' si no existe
    print('En espera de una tarjeta RFID...')
    
    medicion_counter = 0  # Inicializa el contador de mediciones
    
    try:
        while True:
            uid = leer_tag()  # Detectar una tarjeta RFID y obtener su UID
            if uid:
                id_ternera, nombre, edad, peso = gestionar_datos(uid)  # Gestionar los datos de la vaca según el UID
                if id_ternera:
                    enviar_datos_ternera(id_ternera, nombre, edad, peso)  # Enviar datos de la ternera
                    medicion_counter += 1  # Incrementa el contador de mediciones
                    if medicion_counter % 5 == 0:  # Envía el volumen cada 5 mediciones
                        enviar_volumen(id_ternera, round(volumen, 3))
                    medir_volumen(id_ternera)  # Medir el volumen del flujo para la ternera
                time.sleep(10)  # Esperar 10 segundos antes de detectar un nuevo tag
    except KeyboardInterrupt:
        print('Proceso interrumpido.')
        GPIO.cleanup()
        client.loop_stop()
        client.disconnect()
